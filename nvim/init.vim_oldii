" Based off of Jess Archer's configs
"--------------------------------------------------------------------------
" General settings
"--------------------------------------------------------------------------

set expandtab
set shiftwidth=4
set tabstop=4
set hidden
set signcolumn=yes:2
set relativenumber
set splitbelow splitright
set number
set termguicolors
" set undofile
" set spell
" set title
set ignorecase
set ic
set smartcase
set wildmode=longest:full,full
set nowrap
set list
set listchars=tab:▸\ ,trail:·
set mouse=a
set scrolloff=3
set sidescrolloff=3
set nojoinspaces
set clipboard+=unnamedplus
set exrc
" set backup
" set backupdir=~/.local/share/nvim/backup//
set updatetime=300 " Reduce time for highlighting other references
set redrawtime=13000 " Allow more time for loading syntax on large files
set showmatch
"--------------------------------------------------------------------------
" Key maps
"--------------------------------------------------------------------------
" nnoremap <leader>S :%s//g<Left><Left>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <M-j>    :resize -2<CR>
nnoremap <M-k>    :resize +2<CR>
nnoremap <M-h>    :vertical resize -2<CR>
nnoremap <M-l>    :vertical resize +2<CR>
nnoremap <M-m> :MarkdownPreview<CR>
map gl :bn<CR>
map gh :bp<CR>

let mapleader = "\<space>"

nmap <leader>ve :edit ~/.config/nvim/init.vim<cr>
nmap <leader>vc :edit ~/.config/nvim/coc-settings.json<cr>
nmap <leader>vr :source ~/.config/nvim/init.vim<cr>

nmap <leader>k :nohlsearch<CR>
nmap <leader>Q :bufdo bdelete<cr>

" Allow gf to open non-existent files
map gf :edit <cfile><cr>

" Reselect visual selection after indenting
vnoremap < <gv
vnoremap > >gv

" Maintain the cursor position when yanking a visual selection
" http://ddrscott.github.io/blog/2016/yank-without-jank/
vnoremap y myy`y
vnoremap Y myY`y

" When text is wrapped, move by terminal rows, not lines, unless a count is provided
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

" Paste replace visual selection without copying it
vnoremap <leader>p "_dP

" Make Y behave like the other capitals
nnoremap Y y$
nmap <leader>x :!xdg-open %<cr><cr>

" Quicky escape to normal mode
imap ii <esc>

" Easy insertion of a trailing ; or , from insert mode
imap ;; <Esc>A;<Esc>
imap ,, <Esc>A,<Esc>

cmap w!! %!sudo tee > /dev/null %

"--------------------------------------------------------------------------
" Plugins
"--------------------------------------------------------------------------

" Automatically install vim-plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin(data_dir . '/plugins')

Plug 'neovim/nvim-lspconfig'
source ~/.config/nvim/plugins/airline.vim
" source ~/.config/nvim/plugins/coc.vim
source ~/.config/nvim/plugins/commentary.vim
source ~/.config/nvim/plugins/context-commentstring.vim
source ~/.config/nvim/plugins/dracula.vim
source ~/.config/nvim/plugins/eunuch.vim
source ~/.config/nvim/plugins/exchange.vim
" source ~/.config/nvim/plugins/firenvim.vim
" source ~/.config/nvim/plugins/floaterm.vim
source ~/.config/nvim/plugins/fzf.vim
source ~/.config/nvim/plugins/heritage.vim
" source ~/.config/nvim/plugins/lastplace.vim
" source ~/.config/nvim/plugins/lion.vim
source ~/.config/nvim/plugins/nerdtree.vim
source ~/.config/nvim/plugins/pasta.vim
source ~/.config/nvim/plugins/peekaboo.vim
source ~/.config/nvim/plugins/polyglot.vim
source ~/.config/nvim/plugins/quickscope.vim
" source ~/.config/nvim/plugins/repeat.vim
source ~/.config/nvim/plugins/sayonara.vim
source ~/.config/nvim/plugins/smooth-scroll.vim
source ~/.config/nvim/plugins/splitjoin.vim
source ~/.config/nvim/plugins/surround.vim
source ~/.config/nvim/plugins/targets.vim
" source ~/.config/nvim/plugins/unimpaired.vim
" source ~/.config/nvim/plugins/visual-multi.vim
" source ~/.config/nvim/plugins/visual-star-search.vim
source ~/.config/nvim/plugins/textobj-xmlattr.vim
" source ~/.config/nvim/plugins/which-key.vim

source ~/.config/nvim/plugins/lspconfig.vim
source ~/.config/nvim/plugins/cmp-nvim-lsp.vim
source ~/.config/nvim/plugins/cmp-buffer.vim
source ~/.config/nvim/plugins/nvim-cmp.vim
source ~/.config/nvim/plugins/lspkind-nvim.vim
source ~/.config/nvim/plugins/vimwiki.vim
source ~/.config/nvim/plugins/nvim-colorizer.lua.vim
source ~/.config/nvim/plugins/vim-rainbow.vim
source ~/.config/nvim/plugins/auto-pairs.vim
source ~/.config/nvim/plugins/vim-highlightedyank.vim
source ~/.config/nvim/plugins/vim-sneak.vim
source ~/.config/nvim/plugins/markdown-preview.vim
call plug#end()

doautocmd User PlugLoaded
" Misc
autocmd BufWritePost *default.yml !espanso restart
autocmd FileWritePost *zshrc !source ~/.zshrc
au BufWritePost *.go !gofmt -w %

:lua <<EOF
   require'lspconfig'.solargraph.setup{}
   local lspkind = require('lspkind')
   local cmp = require'cmp'
   cmp.setup {
     formatting = {
       format = lspkind.cmp_format({
         mode = 'symbol', -- show only symbol annotations
         maxwidth = 50, -- prevent the popup from showing more than provided characters (e.g 50 will not show more than 50 characters)

         -- The function below will be called before any actual modifications from lspkind
         -- so that you can provide more controls on popup customization. (See [#30](https://github.com/onsails/lspkind-nvim/pull/30))
         before = function (entry, vim_item)
           return vim_item
         end
       })
     }
   }

   cmp.setup {
      mapping = {
         ["<C-d>"] = cmp.mapping.scroll_docs(-4),
         ["<C-f>"] = cmp.mapping.scroll_docs(4),
         ["<C-e>"] = cmp.mapping.close(),
         ["<c-y>"] = cmp.mapping.confirm {
            behavior = cmp.ConfirmBehavior.Insert,
            select = true,
         },
      },
      formatting = {
         format = lspkind.cmp_format {
            with_text = true,
            menu = {
               buffer   = "[buf]",
               nvim_lsp = "[LSP]",
               path     = "[path]",
            },
         },
      },

      sources = {
         { name = "nvim_lsp"},
         { name = "path" },
         { name = "buffer" , keyword_length = 5},
      },
      experimental = {
         ghost_text = true
      }
   }
EOF
